I"˜<p>Hello, I saw the ‚ÄúMonad‚Äù concept at first time at TDC(S√£o Paulo) 2016 at the functional programming Track. I didn‚Äôt get any use possibility in speech (maybe because I don‚Äôt know Haskell), but three months ago, when I started to work in a Java project with two collegues, a senior job colleague convinced me to use java.util.Optional in some cases along this project ‚ÄúIt‚Äôs cool‚Äù, he said. He already worked with Scala using some monadics built-in tools, then he knows the monads advantages.</p>

<p>This project has many sequencial steps, the code majority has to validate something, convert to another type, save in database, send to a queue and so on. After many sprints interactions, when it started to take form, the code did everything needed keeping all things simple basically composing a lot of Functions applied in Java Optional Objects.</p>

<p>After that, when I came back to Ruby, I started to search some gem with the similar behavior, I googled it and I found Dry-Monads inspired by <a href="https://github.com/txus/kleisli">Kleisli</a>. When I visited the Kleisli page I saw this phrase ‚ÄúYou can use Haskell-like function composition with F and the familiar‚Äù, I thought ‚ÄúOh my Gosh, I got Monads now‚Äù. Moments later, I found a cool post in Quora website about Monads, it‚Äôs different(and cool) because don‚Äôt envolves a huge number of mathematical formulas to explain the Monads concept, you can take a look <a href="https://www.quora.com/What-are-monads-in-functional-programming-and-why-are-they-useful">here</a>. He uses Haskell in examples, I don‚Äôt know Haskell but when if you compare to Dry-monads you will understand too.</p>

<h4 id="introduction">Introduction</h4>

<p>Everyone that already programmed in Java, at least once, got an NullPointerException. This error occurs when someone call a function to null reference.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kc">null</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>

<span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NullPointerException</span></code></pre></figure>

<p>If we use Ruby:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">004</span> <span class="o">&gt;</span> <span class="kp">nil</span><span class="p">.</span><span class="nf">to_s</span>
 <span class="o">=&gt;</span> <span class="s2">""</span>
 <span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">005</span> <span class="o">&gt;</span> <span class="kp">nil</span><span class="p">.</span><span class="nf">methods</span>
  <span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:&amp;</span><span class="p">,</span> <span class="ss">:^</span><span class="p">,</span> <span class="ss">:|</span><span class="p">,</span> <span class="ss">:===</span><span class="p">,</span> <span class="ss">:inspect</span><span class="p">,</span> <span class="ss">:to_a</span><span class="p">,</span> <span class="ss">:to_s</span><span class="p">,</span> <span class="ss">:to_i</span><span class="p">,</span> <span class="ss">:to_f</span><span class="p">,</span> <span class="ss">:nil?</span><span class="p">,</span> <span class="o">...</span> <span class="p">,</span> <span class="ss">:instance_eval</span><span class="p">,</span> <span class="ss">:instance_exec</span><span class="p">,</span> <span class="ss">:__id__</span><span class="p">]</span>

<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">006</span> <span class="o">&gt;</span> <span class="kp">nil</span><span class="p">.</span><span class="nf">bla</span>
<span class="no">NoMethodError</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`bla' for nil:NilClass
  from (irb):6
    from /home/gabriel/.rvm/rubies/ruby-2.3.1/bin/irb:11:in `</span><span class="o">&lt;</span><span class="n">main</span><span class="o">&gt;</span><span class="err">'</span></code></pre></figure>

<p>Ruby return an exception when we try to call an inexistent attribute or method, but when we call ‚Äò.to_s‚Äô it returns a blank string. If we use Java, when we call any method to null, it will return an ‚ÄúNullPointerException‚Äù.</p>

<p>Since Java 8, we have the java.util.Optional, it can be useful in this case, to return an empty string when we use a null reference. Let‚Äôs see the example below:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="kc">null</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="nl">Object:</span><span class="o">:</span><span class="n">toString</span><span class="o">).</span><span class="na">orElse</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>

<span class="c1">//And it returns</span>
<span class="s">""</span></code></pre></figure>

<p>It‚Äôs extremely useful to avoid Java NullPointerException. Another cool thing is the chain methods possibility, we can do it using some functions as ‚Äò#map‚Äô and ‚Äò#flatMap‚Äô. We can also use the Optional behavior to avoid ‚Äòif‚Äô sequences and we can to turn our code more readable using the same text way. In Elixir we can chain methods using the pipe operator ‚Äò|&gt;‚Äô, let‚Äôs check it.</p>

<figure class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="s2">"Some String"</span> <span class="o">|&gt;</span> <span class="no">String</span><span class="o">.</span><span class="n">upcase</span>

<span class="o">//</span><span class="no">And</span> <span class="n">it</span> <span class="n">returns</span>
<span class="s2">"SOME STRING"</span></code></pre></figure>

<p>We can do it in Java too.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="s">"Some String"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">String:</span><span class="o">:</span><span class="n">toUpperCase</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>

<span class="c1">//And it returns</span>
<span class="s">"SOME STRING"</span></code></pre></figure>

<h4 id="starting">Starting</h4>

<p>We used this behavior many times in our project than, in this post, I will try show a similar concept using Dry-Monads in a simple ‚ÄòOrder‚Äô example.</p>

<p>Ok, let‚Äôs start, Our very simple use case is:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="sr">/*
     We have an Order, this Order has a Products, every Product has one price, but it can be nil to gifts, for example. The products sum can't be negative. An Order has a discount. It can be informed or no. Our task is calculate the order total.

     Order
       has -&gt; products
       calc -&gt; total - discount

     Product
       price
*/</span></code></pre></figure>

<p>First, we need an Order class</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Order</span>
  <span class="k">def</span> <span class="nf">total</span>
    <span class="vi">@products</span><span class="p">.</span><span class="nf">pluck</span><span class="p">(</span><span class="ss">:price</span><span class="p">).</span><span class="nf">reduce</span><span class="p">(:</span><span class="o">+</span><span class="p">)</span> <span class="o">-</span> <span class="n">discount</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">add_product</span><span class="p">(</span><span class="n">product</span><span class="p">)</span>
    <span class="vi">@products</span> <span class="o">=</span> <span class="no">Array</span><span class="p">(</span><span class="vi">@products</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">product</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">discount</span><span class="o">=</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    <span class="vi">@discount</span> <span class="o">=</span> <span class="n">value</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">discount</span>
    <span class="vi">@discount</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">products</span><span class="o">=</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    <span class="vi">@products</span> <span class="o">=</span> <span class="n">value</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">products</span>
    <span class="vi">@products</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p><em>Ps:. I wrote all getter and setters to turn easier to understand.</em></p>

<p>And the Product class</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Product</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">price</span><span class="p">:)</span>
    <span class="vi">@price</span> <span class="o">=</span> <span class="n">price</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">price</span>
    <span class="vi">@price</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>Now, let‚Äôs check if works creating an Order and some products</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="n">order</span> <span class="o">=</span> <span class="no">Order</span><span class="p">.</span><span class="nf">new</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Order:0x000000031aa0d8&gt;</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span> <span class="n">products</span> <span class="o">=</span> <span class="p">[]</span>
<span class="o">=&gt;</span> <span class="p">[]</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="n">products</span> <span class="o">&lt;&lt;</span> <span class="no">Product</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">price: </span><span class="no">Random</span><span class="p">.</span><span class="nf">rand</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="p">}</span>
<span class="o">=&gt;</span> <span class="mi">10</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">004</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">products</span> <span class="o">=</span> <span class="n">products</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="c1">#&lt;Product:0x000000046b2a70 @price=6.490346125032528&gt;, [...More products here], #&lt;Product:0x000000046b24f8 @price=4.088797576323275&gt;, #&lt;Product:0x000000046b2430 @price=5.311290981668898&gt;]</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">005</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">discount</span><span class="o">=</span> <span class="mi">10</span>
 <span class="o">=&gt;</span> <span class="mi">10</span>
 <span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">006</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">total</span>
  <span class="o">=&gt;</span> <span class="mf">34.6909868839012</span></code></pre></figure>

<p>Awesome, it works! But if we set discount as nil‚Ä¶</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">00</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">discount</span> <span class="o">=</span> <span class="kp">nil</span>
 <span class="o">=&gt;</span> <span class="kp">nil</span>
 <span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">010</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">total</span>
 <span class="no">TypeError</span><span class="p">:</span> <span class="kp">nil</span> <span class="n">can</span><span class="s1">'t be coerced into Float
  from /home/gabriel/projects/ruby/blog/app/models/order.rb:3:in '</span><span class="o">-</span><span class="err">'</span></code></pre></figure>

<p>Oh :( it‚Äôs bad. Do you know what happen if at least one product has a nil price?</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">011</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">add_product</span><span class="p">(</span><span class="no">Product</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">price: </span><span class="kp">nil</span><span class="p">))</span>
 <span class="o">=&gt;</span> <span class="p">[</span><span class="c1">#&lt;Product:0x000000046b2a70 @price=6.490346125032528&gt;, [...More products here], #&lt;Product:0x000000046b2430 @price=5.311290981668898&gt;, #&lt;Product:0x000000045fc108 @price=nil&gt;]</span>
 <span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">012</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">total</span>
 <span class="no">TypeError</span><span class="p">:</span> <span class="kp">nil</span> <span class="n">can</span><span class="s1">'t be coerced into Float
  from /home/gabriel/projects/ruby/blog/app/models/order.rb:3:in '</span><span class="o">+</span><span class="err">'</span></code></pre></figure>

<p>Is it easy to correct, right? We can add the code below to avoid these exceptions.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Product</span>
<span class="o">...</span>
  <span class="k">def</span> <span class="nf">price</span>
    <span class="vi">@price</span> <span class="o">||</span> <span class="mi">0</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Order</span>
 <span class="o">...</span>
  <span class="k">def</span> <span class="nf">discount</span>
    <span class="vi">@discount</span> <span class="o">||</span> <span class="mi">0</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="n">order</span> <span class="o">=</span> <span class="no">Order</span><span class="p">.</span><span class="nf">new</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Order:0x00000004d27a68&gt;</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span> <span class="n">products</span> <span class="o">=</span> <span class="p">[]</span>
<span class="o">=&gt;</span> <span class="p">[]</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="n">products</span> <span class="o">&lt;&lt;</span> <span class="no">Product</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">price: </span><span class="no">Random</span><span class="p">.</span><span class="nf">rand</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="p">}</span>
<span class="o">=&gt;</span> <span class="mi">10</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">004</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">products</span> <span class="o">=</span> <span class="n">products</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="c1">#&lt;Product:0x00000004d09248 @price=1.7050223472417392&gt;, [...More products here], #&lt;Product:0x00000004d08b90 @price=1.9066992998913168&gt;, #&lt;Product:0x00000004d08b18 @price=3.178449375930751&gt;]</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">005</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">total</span>
<span class="o">=&gt;</span> <span class="mf">41.55253855960062</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">006</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">add_product</span><span class="p">(</span><span class="no">Product</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">price: </span><span class="kp">nil</span><span class="p">))</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="c1">#&lt;Product:0x00000004d09248 @price=1.7050223472417392&gt;, [...More products here], #&lt;Product:0x00000004d08b18 @price=3.178449375930751&gt;, #&lt;Product:0x00000004cd1b40 @price=nil&gt;]</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">007</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">total</span>
<span class="o">=&gt;</span> <span class="mf">41.55253855960062</span></code></pre></figure>

<p>Magic, it‚Äôs works! but could we call an order without products?</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">00</span><span class="mi">8</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">products</span> <span class="o">=</span> <span class="kp">nil</span>
 <span class="o">=&gt;</span> <span class="kp">nil</span>
 <span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">00</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">total</span>
 <span class="no">NoMethodError</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="s1">'map'</span> <span class="k">for</span> <span class="kp">nil</span><span class="ss">:NilClass</span></code></pre></figure>

<p>Oh damn it, we can use the ‚Äò||‚Äô operator too or Array(value), but we can try something different using dry-monads. Let‚Äôs change the code!</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Product</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">price</span><span class="p">:)</span>
    <span class="vi">@price</span> <span class="o">=</span> <span class="n">price</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">price</span>
    <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="o">::</span><span class="no">Maybe</span><span class="p">(</span><span class="vi">@price</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="sr">//</span> <span class="no">And</span> <span class="n">the</span> <span class="n">order</span> <span class="k">class</span>

<span class="k">class</span> <span class="nc">Order</span>
  <span class="k">def</span> <span class="nf">total</span>
    <span class="n">products</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="o">-&gt;</span> <span class="p">(</span><span class="n">products</span><span class="p">)</span> <span class="p">{</span> <span class="n">products</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="p">.</span><span class="nf">price</span><span class="p">.</span><span class="nf">value_or</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">}.</span><span class="nf">reduce</span><span class="p">(:</span><span class="o">+</span><span class="p">)</span> <span class="o">-</span> <span class="n">discount</span><span class="p">.</span><span class="nf">value_of</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">})</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">add_product</span><span class="p">(</span><span class="n">product</span><span class="p">)</span>
    <span class="vi">@products</span> <span class="o">=</span> <span class="no">Array</span><span class="p">(</span><span class="vi">@products</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">product</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">discount</span><span class="o">=</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    <span class="vi">@discount</span> <span class="o">=</span> <span class="n">value</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">discount</span>
    <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="o">::</span><span class="no">Maybe</span><span class="p">(</span><span class="vi">@discount</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">products</span><span class="o">=</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    <span class="vi">@products</span> <span class="o">=</span> <span class="n">value</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">products</span>
    <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="o">::</span><span class="no">Maybe</span><span class="p">(</span><span class="vi">@products</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>We used Maybe in this case to get an Optional behavior. It will return None if we pass null or Some in non null cases as code below.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="o">::</span><span class="no">Maybe</span><span class="p">(</span><span class="kp">nil</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="no">None</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">004</span> <span class="o">&gt;</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="o">::</span><span class="no">Maybe</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="no">Some</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span></code></pre></figure>

<p>The bind function was used to apply a function in object. We can use it to do an Upcase like previously.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">005</span> <span class="o">&gt;</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="o">::</span><span class="no">Maybe</span><span class="p">(</span><span class="s2">"Bla"</span><span class="p">).</span><span class="nf">bind</span><span class="p">(</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">str</span><span class="p">)</span> <span class="p">{</span> <span class="n">str</span><span class="p">.</span><span class="nf">upcase</span> <span class="p">})</span>
<span class="o">=&gt;</span> <span class="s2">"BLA"</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">006</span> <span class="o">&gt;</span><span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="o">::</span><span class="no">Maybe</span><span class="p">(</span><span class="s2">"Bla"</span><span class="p">).</span><span class="nf">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:upcase</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="s2">"BLA"</span></code></pre></figure>

<p>Then let‚Äôs try the new version</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">00</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="n">order</span> <span class="o">=</span> <span class="no">Order</span><span class="p">.</span><span class="nf">new</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Order:0x00000004d11e70&gt;</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">010</span> <span class="o">&gt;</span> <span class="n">products</span> <span class="o">=</span> <span class="p">[]</span>
<span class="o">=&gt;</span> <span class="p">[]</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">011</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="n">products</span> <span class="o">&lt;&lt;</span> <span class="no">Product</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">price: </span><span class="no">Random</span><span class="p">.</span><span class="nf">rand</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="p">}</span>
<span class="o">=&gt;</span> <span class="mi">10</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">012</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">products</span> <span class="o">=</span> <span class="n">products</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="c1">#&lt;Product:0x00000004cf1788 @price=8.306382864273731&gt;, [...More products here], #&lt;Product:0x00000004cf1080 @price=0.4676475154069548&gt;]</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">013</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">total</span>
<span class="o">=&gt;</span> <span class="mf">38.75444516036125</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">014</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">products</span> <span class="o">=</span> <span class="kp">nil</span>
<span class="o">=&gt;</span> <span class="kp">nil</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">015</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">total</span>
<span class="o">=&gt;</span> <span class="no">None</span></code></pre></figure>

<p>It‚Äôs works, but the total function isn‚Äôt readable, we can improve it, but first, take a look:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="k">def</span> <span class="nf">total</span>
    <span class="n">products</span>
      <span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="o">-&gt;</span> <span class="p">(</span><span class="n">products</span><span class="p">)</span> <span class="p">{</span> <span class="n">products</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="p">.</span><span class="nf">price</span><span class="p">.</span><span class="nf">value_or</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">}.</span><span class="nf">reduce</span><span class="p">(:</span><span class="o">+</span><span class="p">)</span> <span class="o">-</span> <span class="n">discount</span><span class="p">.</span><span class="nf">value_of</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">})</span>
  <span class="k">end</span></code></pre></figure>

<p>The total function has three responsabilities, it collects all products price, sum it and subtract the discount. We can break it into 3 separated functions, something like the code below.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Order</span>
  <span class="k">def</span> <span class="nf">total</span>
    <span class="n">products</span>
      <span class="p">.</span><span class="nf">fmap</span><span class="p">(</span><span class="n">collect_prices</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">fmap</span><span class="p">(</span><span class="n">sum</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="n">subtract_discount</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">add_product</span><span class="p">(</span><span class="n">product</span><span class="p">)</span>
    <span class="vi">@products</span> <span class="o">=</span> <span class="no">Array</span><span class="p">(</span><span class="vi">@products</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">product</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">discount</span><span class="o">=</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    <span class="vi">@discount</span> <span class="o">=</span> <span class="n">value</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">discount</span>
    <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="o">::</span><span class="no">Maybe</span><span class="p">(</span><span class="vi">@discount</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">products</span><span class="o">=</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    <span class="vi">@products</span> <span class="o">=</span> <span class="n">value</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">products</span>
    <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="o">::</span><span class="no">Maybe</span><span class="p">(</span><span class="vi">@products</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">collect_prices</span>
    <span class="o">-&gt;</span> <span class="p">(</span><span class="n">products</span><span class="p">)</span> <span class="p">{</span> <span class="n">products</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="p">.</span><span class="nf">price</span><span class="p">.</span><span class="nf">value_of</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">sum</span>
    <span class="o">-&gt;</span> <span class="p">(</span><span class="n">prices</span><span class="p">)</span> <span class="p">{</span> <span class="n">prices</span><span class="p">.</span><span class="nf">reduce</span><span class="p">(:</span><span class="o">+</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">subtract_discount</span>
    <span class="o">-&gt;</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="p">{</span> <span class="n">discount</span><span class="p">.</span><span class="nf">fmap</span><span class="p">(</span><span class="o">-&gt;</span> <span class="p">(</span><span class="n">discount</span><span class="p">)</span> <span class="p">{</span> <span class="n">total</span> <span class="o">-</span> <span class="n">discount</span> <span class="p">}).</span><span class="nf">or</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>The code above used a #fmap function, it works like the bind function but it wrap the result into Some. The #fmap function returns None if applied in a None object. It works like the example below.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="o">::</span><span class="no">Some</span><span class="p">(</span><span class="s2">"Bla"</span><span class="p">).</span><span class="nf">fmap</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:upcase</span><span class="p">)</span>
 <span class="o">=&gt;</span> <span class="no">Some</span><span class="p">(</span><span class="s2">"BLA"</span><span class="p">)</span>
 <span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">005</span> <span class="o">&gt;</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="o">::</span><span class="no">Maybe</span><span class="p">(</span><span class="kp">nil</span><span class="p">).</span><span class="nf">fmap</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:upcase</span><span class="p">)</span>
 <span class="o">=&gt;</span> <span class="no">None</span></code></pre></figure>

<p>It‚Äôs cool, but now we need to add another feature. If our order doesn‚Äôt has products, we don‚Äôt need to calculate the total in these cases, then we can add this behavior using the ‚ÄòEither mixin‚Äô. Let‚Äôs see how we can use it. We will create a new command class ‚ÄòCommands::Order::Total‚Äô and use it to calculate the order price.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Order</span>
  <span class="k">def</span> <span class="nf">add_product</span><span class="p">(</span><span class="n">product</span><span class="p">)</span>
    <span class="vi">@products</span> <span class="o">=</span> <span class="no">Array</span><span class="p">(</span><span class="vi">@products</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">product</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">discount</span><span class="o">=</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    <span class="vi">@discount</span> <span class="o">=</span> <span class="n">value</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">discount</span>
    <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="o">::</span><span class="no">Maybe</span><span class="p">(</span><span class="vi">@discount</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">products</span><span class="o">=</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    <span class="vi">@products</span> <span class="o">=</span> <span class="n">value</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">products</span>
    <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="o">::</span><span class="no">Maybe</span><span class="p">(</span><span class="vi">@products</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Commands::Order::Total</span>
  <span class="kp">include</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="o">::</span><span class="no">Either</span><span class="o">::</span><span class="no">Mixin</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
     <span class="n">order</span><span class="p">.</span><span class="nf">products</span>
      <span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="n">collect_prices</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">fmap</span><span class="p">(</span><span class="n">sum</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="n">subtract_discount</span><span class="p">(</span><span class="n">order</span><span class="p">))</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">collect_prices</span>
    <span class="o">-&gt;</span> <span class="p">(</span><span class="n">products</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="no">Left</span><span class="p">(</span><span class="s1">'You should add products'</span><span class="p">)</span> <span class="k">if</span> <span class="n">products</span><span class="p">.</span><span class="nf">empty?</span>
      <span class="no">Right</span><span class="p">(</span><span class="n">products</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="p">.</span><span class="nf">price</span><span class="p">.</span><span class="nf">value_or</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">})</span>
    <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">sum</span>
    <span class="o">-&gt;</span> <span class="p">(</span><span class="n">prices</span><span class="p">)</span> <span class="p">{</span> <span class="n">prices</span><span class="p">.</span><span class="nf">reduce</span><span class="p">(:</span><span class="o">+</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">subtract_discount</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
    <span class="o">-&gt;</span>  <span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="p">{</span> <span class="n">order</span><span class="p">.</span><span class="nf">discount</span><span class="p">.</span><span class="nf">fmap</span><span class="p">(</span><span class="o">-&gt;</span> <span class="p">(</span><span class="n">discount</span><span class="p">)</span> <span class="p">{</span> <span class="n">total</span> <span class="o">-</span> <span class="n">discount</span> <span class="p">}).</span><span class="nf">or</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="sr">/* Some examples */</span>

<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="n">order</span> <span class="o">=</span> <span class="no">Order</span><span class="p">.</span><span class="nf">new</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Order:0x00000004eea670&gt;</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span> <span class="n">products</span> <span class="o">=</span> <span class="p">[]</span>
<span class="o">=&gt;</span> <span class="p">[]</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="n">products</span> <span class="o">&lt;&lt;</span> <span class="no">Product</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">price: </span><span class="no">Random</span><span class="p">.</span><span class="nf">rand</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="p">}</span>
<span class="o">=&gt;</span> <span class="mi">10</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">004</span> <span class="o">&gt;</span> <span class="n">calc</span> <span class="o">=</span> <span class="no">Commands</span><span class="o">::</span><span class="no">Order</span><span class="o">::</span><span class="no">Total</span><span class="p">.</span><span class="nf">new</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Commands::Order::Total:0x00000004e96c28&gt;</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">005</span> <span class="o">&gt;</span> <span class="n">calc</span><span class="p">.</span><span class="nf">call</span> <span class="n">order</span>
<span class="o">=&gt;</span> <span class="no">None</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">006</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">products</span> <span class="o">=</span> <span class="p">[]</span>
<span class="o">=&gt;</span> <span class="p">[]</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">007</span> <span class="o">&gt;</span> <span class="n">calc</span><span class="p">.</span><span class="nf">call</span> <span class="n">order</span>
<span class="o">=&gt;</span> <span class="no">Left</span><span class="p">(</span><span class="s2">"You should add products to calculate the total"</span><span class="p">)</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">00</span><span class="mi">8</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">products</span> <span class="o">=</span> <span class="n">products</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="c1">#&lt;Product:0x00000004ed4af0 @price=3.8706171589310223&gt;, [...More products here], #&lt;Product:0x00000004ed4668 @price=3.8299514817332634&gt;, #&lt;Product:0x00000004ed45f0 @price=0.595434488114438&gt;]</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">00</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="n">calc</span><span class="p">.</span><span class="nf">call</span> <span class="n">order</span>
<span class="o">=&gt;</span> <span class="mf">37.45434887890415</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">010</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">discount</span> <span class="o">=</span> <span class="mi">10</span>
<span class="o">=&gt;</span> <span class="mi">10</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">011</span> <span class="o">&gt;</span> <span class="n">calc</span><span class="p">.</span><span class="nf">call</span> <span class="n">order</span>
<span class="o">=&gt;</span> <span class="no">Some</span><span class="p">(</span><span class="mf">27.45434887890415</span><span class="p">)</span></code></pre></figure>

<p>The Dry-Monads page describe Left and right as <em>‚ÄúThe Right can be thought of as ‚Äúeverything went right‚Äù and the Left is used when ‚Äúsomething has gone wrong.‚Äù</em>. Left is something like an exception, then when we have a function that returns Left the next chain function isn‚Äôt executed. Right is used when we have an expected result, then it can pass to next chain function.</p>

<p>It works! but the code returns None, Some or Left in some cases. If we use only Left and right we can check if we had success or no. Another thing is the sum of prices can be negative, we can return an failure if it occurs. Let‚Äôs make some changes.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Commands::Order::Total</span>
  <span class="kp">include</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="o">::</span><span class="no">Either</span><span class="o">::</span><span class="no">Mixin</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
    <span class="n">order</span><span class="p">.</span><span class="nf">products</span>
    <span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="n">collect_prices</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="n">sum</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="n">subtract_discount</span><span class="p">(</span><span class="n">order</span><span class="p">))</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">collect_prices</span>
    <span class="o">-&gt;</span> <span class="p">(</span><span class="n">products</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="no">Left</span><span class="p">(</span><span class="s1">'You should add products'</span><span class="p">)</span> <span class="k">if</span> <span class="n">products</span><span class="p">.</span><span class="nf">empty?</span>
      <span class="no">Right</span><span class="p">(</span><span class="n">products</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="p">.</span><span class="nf">price</span><span class="p">.</span><span class="nf">value_or</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">})</span>
    <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">sum</span>
    <span class="o">-&gt;</span> <span class="p">(</span><span class="n">prices</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">total</span> <span class="o">=</span> <span class="n">prices</span><span class="p">.</span><span class="nf">reduce</span><span class="p">(:</span><span class="o">+</span><span class="p">)</span>
      <span class="k">return</span> <span class="no">Left</span><span class="p">(</span><span class="s1">'The total can\'t be negative'</span><span class="p">)</span> <span class="k">if</span> <span class="n">total</span> <span class="o">&lt;</span> <span class="mi">0</span>
      <span class="no">Right</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">subtract_discount</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">order</span><span class="p">.</span><span class="nf">discount</span>
        <span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="o">-&gt;</span> <span class="p">(</span><span class="n">discount</span><span class="p">)</span> <span class="p">{</span> <span class="n">total</span> <span class="o">-</span> <span class="n">discount</span> <span class="p">})</span>
        <span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="o">-&gt;</span> <span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="p">{</span> <span class="no">Right</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="p">}</span> <span class="p">)</span>
        <span class="p">.</span><span class="nf">or</span><span class="p">(</span><span class="no">Right</span><span class="p">(</span><span class="n">total</span><span class="p">))</span>
    <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">03</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">products</span> <span class="o">=</span> <span class="n">products</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="c1">#&lt;Product:0x000000043358e8 @price=0.3621462392006869&gt;, [...More products here], #&lt;Product:0x000000044ea0a8 @price=50&gt;, #&lt;Product:0x000000044da630 @price=-120&gt;]</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">040</span> <span class="o">&gt;</span> <span class="n">calc</span><span class="p">.</span><span class="nf">call</span> <span class="n">order</span>
<span class="o">=&gt;</span> <span class="no">Left</span><span class="p">(</span><span class="s2">"The total can't be negative"</span><span class="p">)</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">041</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">products</span> <span class="o">=</span> <span class="p">[]</span>
<span class="o">=&gt;</span> <span class="p">[]</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">042</span> <span class="o">&gt;</span> <span class="n">calc</span><span class="p">.</span><span class="nf">call</span> <span class="n">order</span>
<span class="o">=&gt;</span> <span class="no">Left</span><span class="p">(</span><span class="s2">"You should add products"</span><span class="p">)</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">043</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">add_product</span><span class="p">(</span><span class="no">Product</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">price: </span><span class="mi">300</span><span class="p">))</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="c1">#&lt;Product:0x0000000414a088 @price=300&gt;]</span>
  <span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">044</span> <span class="o">&gt;</span> <span class="n">calc</span><span class="p">.</span><span class="nf">call</span> <span class="n">order</span>
<span class="o">=&gt;</span> <span class="no">Right</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
  <span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">045</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">add_product</span><span class="p">(</span><span class="no">Product</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">price: </span><span class="mi">300</span><span class="p">))</span>
  <span class="o">=&gt;</span> <span class="p">[</span><span class="c1">#&lt;Product:0x0000000414a088 @price=300&gt;, #&lt;Product:0x0000000410ded0 @price=300&gt;]</span>
  <span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">046</span> <span class="o">&gt;</span> <span class="n">calc</span><span class="p">.</span><span class="nf">call</span> <span class="n">order</span>
<span class="o">=&gt;</span> <span class="no">Right</span><span class="p">(</span><span class="mi">600</span><span class="p">)</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">05</span><span class="mi">8</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">discount</span> <span class="o">=</span> <span class="mi">10</span>
 <span class="o">=&gt;</span> <span class="mi">10</span>
 <span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">05</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="n">calc</span><span class="p">.</span><span class="nf">call</span> <span class="n">order</span>
<span class="o">=&gt;</span> <span class="no">Right</span><span class="p">(</span><span class="mi">590</span><span class="p">)</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">017</span> <span class="o">&gt;</span> <span class="no">Commands</span><span class="o">::</span><span class="no">Order</span><span class="o">::</span><span class="no">Total</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">call</span> <span class="n">order</span>
 <span class="o">=&gt;</span> <span class="no">Right</span><span class="p">(</span><span class="mf">51.08628673669591</span><span class="p">)</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">014</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="n">products</span> <span class="o">&lt;&lt;</span> <span class="no">Product</span><span class="p">.</span><span class="nf">new</span><span class="p">({</span><span class="ss">price: </span><span class="no">Random</span><span class="p">.</span><span class="nf">rand</span> <span class="o">*</span> <span class="mi">10</span><span class="p">})</span> <span class="p">}</span>
 <span class="o">=&gt;</span> <span class="mi">10</span>
 <span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">015</span> <span class="o">&gt;</span> <span class="n">products</span>
 <span class="o">=&gt;</span> <span class="p">[</span><span class="c1">#&lt;Product:0x000000052ff4b8 @price=1.8427640303941961&gt;, [...More products here], #&lt;Product:0x000000052feef0 @price=9.708438235799372&gt;]</span>
 <span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">016</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">products</span> <span class="o">=</span> <span class="n">products</span>
 <span class="o">=&gt;</span> <span class="p">[</span><span class="c1">#&lt;Product:0x000000052ff4b8 @price=1.8427640303941961&gt;, [...More products here], #&lt;Product:0x000000052feef0 @price=9.708438235799372&gt;]</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">01</span><span class="mi">8</span> <span class="o">&gt;</span> <span class="n">r</span><span class="o">=</span><span class="n">_</span>
<span class="o">=&gt;</span> <span class="no">Right</span><span class="p">(</span><span class="mf">51.08628673669591</span><span class="p">)</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">01</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="n">r</span><span class="p">.</span><span class="nf">success?</span>
<span class="o">=&gt;</span> <span class="kp">true</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">020</span> <span class="o">&gt;</span> <span class="n">products</span> <span class="o">&lt;&lt;</span> <span class="no">Product</span><span class="p">.</span><span class="nf">new</span><span class="p">({</span><span class="ss">price: </span><span class="o">-</span><span class="mi">60</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="c1">#&lt;Product:0x000000052ff4b8 @price=1.8427640303941961&gt;, [... More products here], #&lt;Product:0x00000005252fd8 @price=-60&gt;]</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">021</span> <span class="o">&gt;</span> <span class="n">order</span><span class="p">.</span><span class="nf">products</span> <span class="o">=</span> <span class="n">products</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="c1">#&lt;Product:0x000000052ff4b8 @price=1.8427640303941961&gt;, [...More products here] #&lt;Product:0x00000005252fd8 @price=-60&gt;]</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">022</span> <span class="o">&gt;</span> <span class="no">Commands</span><span class="o">::</span><span class="no">Order</span><span class="o">::</span><span class="no">Total</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">call</span> <span class="n">order</span>
<span class="o">=&gt;</span> <span class="no">Left</span><span class="p">(</span><span class="s2">"The total can't be negative"</span><span class="p">)</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">023</span> <span class="o">&gt;</span> <span class="n">r</span><span class="o">=</span><span class="n">_</span>
<span class="o">=&gt;</span> <span class="no">Left</span><span class="p">(</span><span class="s2">"The total can't be negative"</span><span class="p">)</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">:</span><span class="mo">024</span> <span class="o">&gt;</span> <span class="n">r</span><span class="p">.</span><span class="nf">success?</span>
<span class="o">=&gt;</span> <span class="kp">false</span></code></pre></figure>

<p>That‚Äôs all, Is it cool, right? If you like it you can check the page project <a href="http://dry-rb.org/gems/dry-monads/">here</a>, there are many amazing features.</p>

<p>Thanks!</p>

<h3 id="references">References</h3>
<ul>
  <li>http://dry-rb.org/gems/dry-monads/</li>
  <li>https://medium.com/@sinisalouc/demystifying-the-monad-in-scala-cc716bb6f534#.g2jyjrme3</li>
  <li>https://www.quora.com/What-are-monads-in-functional-programming-and-why-are-they-useful</li>
  <li>https://github.com/txus/kleisli</li>
</ul>

:ET