I"%<p>Function composition was added to Ruby a while a go but I didnt even know about that a month ago. Since I wont use Rails in my next job I decided to group a bunch of gems together and use this concept to write a simple API.</p>

<p>All the code mentioned here can be found <a href="https://github.com/GabrielMalakias/composable_web_example">here</a>.</p>

<h5 id="disclaimer">DISCLAIMER</h5>
<p><strong><em>I used function composition here as a way to challenge myself using building the “business rules” by composing functions. I do not intend to change your mind about the way you should write your apps, the idea here is to experiment and see how far the language allows me to do so.</em></strong></p>

<h3 id="gluing-pieces-together">Gluing pieces together</h3>

<p>Before starting I defined all the necessities I would have if I where building my own micro web-framework, in the end I came up with the following:</p>

<ul>
  <li>Server/Routing: <a href="https://github.com/ohler55/agoo">Agoo</a>;</li>
  <li>Database Interface: <a href="https://github.com/jeremyevans/sequel">Sequel</a>;</li>
  <li>Code loader: <a href="https://github.com/fxn/zeitwerk">Zeitwerk</a>;</li>
  <li>Input validations: <a href="https://github.com/dry-rb/dry-validation">Dry-Validation</a>;</li>
  <li>Json serialization: <a href="https://github.com/dry-rb/dry-validation">Oj</a>;</li>
</ul>

<p>To start the app I defined the following class:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frozen_string_literal: true</span>

<span class="c1"># Also available here: https://github.com/GabrielMalakias/composable_web_example/blob/master/application.rb</span>

<span class="nb">require</span> <span class="s1">'agoo'</span>
<span class="nb">require</span> <span class="s1">'sequel'</span>
<span class="nb">require</span> <span class="s1">'zeitwerk'</span>
<span class="nb">require</span> <span class="s1">'oj'</span>
<span class="nb">require</span> <span class="s1">'dry-validation'</span>

<span class="k">class</span> <span class="nc">Application</span>
  <span class="no">DB</span> <span class="o">=</span> <span class="no">Sequel</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="s1">'postgres://localhost:5432'</span><span class="p">,</span> <span class="ss">user: </span><span class="s1">'postgres'</span><span class="p">,</span> <span class="ss">password: </span><span class="s1">'123'</span><span class="p">)</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">load_files</span>
    <span class="n">loader</span> <span class="o">=</span> <span class="no">Zeitwerk</span><span class="o">::</span><span class="no">Loader</span><span class="p">.</span><span class="nf">new</span>
    <span class="n">loader</span><span class="p">.</span><span class="nf">push_dir</span><span class="p">(</span><span class="s1">'./lib'</span><span class="p">)</span>
    <span class="n">loader</span><span class="p">.</span><span class="nf">setup</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">start!</span>
    <span class="no">Agoo</span><span class="o">::</span><span class="no">Server</span><span class="p">.</span><span class="nf">init</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="s1">'root'</span><span class="p">)</span>
    <span class="no">Agoo</span><span class="o">::</span><span class="no">Server</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="ss">:POST</span><span class="p">,</span> <span class="s1">'/authors'</span><span class="p">,</span> <span class="no">Handler</span><span class="o">::</span><span class="no">CreateAuthor</span><span class="p">.</span><span class="nf">new</span><span class="p">)</span>
    <span class="no">Agoo</span><span class="o">::</span><span class="no">Server</span><span class="p">.</span><span class="nf">handle</span><span class="p">(</span><span class="ss">:GET</span><span class="p">,</span> <span class="s1">'/authors/*'</span><span class="p">,</span> <span class="no">Handler</span><span class="o">::</span><span class="no">FindAuthor</span><span class="p">)</span>
    <span class="no">Agoo</span><span class="o">::</span><span class="no">Server</span><span class="p">.</span><span class="nf">start</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Application</span><span class="p">.</span><span class="nf">load_files</span>
</code></pre></div></div>

<p>The file above loads the gems needed and:</p>
<ul>
  <li>Creates the DB connection by defining the <code class="language-plaintext highlighter-rouge">DB</code> constant managed by <code class="language-plaintext highlighter-rouge">Sequel</code>;</li>
  <li>A function to load app files within the ‘lib’ folder lazily using <code class="language-plaintext highlighter-rouge">Zeitwerk</code></li>
  <li>A function which initializes and map the routes using <code class="language-plaintext highlighter-rouge">Agoo</code>;</li>
</ul>

<p>Besides this file I have also  a <code class="language-plaintext highlighter-rouge">Rakefile</code> with the following:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frozen_string_literal: true</span>

<span class="nb">require</span> <span class="s1">'logger'</span>
<span class="nb">require</span> <span class="s1">'sequel'</span>

<span class="n">namespace</span> <span class="ss">:app</span> <span class="k">do</span>
  <span class="n">desc</span> <span class="s1">'Start server'</span>
  <span class="n">task</span> <span class="ss">:start</span> <span class="k">do</span>
    <span class="nb">require_relative</span> <span class="s1">'application'</span>

    <span class="no">Application</span><span class="p">.</span><span class="nf">start!</span>
  <span class="k">end</span>

  <span class="n">desc</span> <span class="s1">'Open a console'</span>
  <span class="n">task</span> <span class="ss">:console</span> <span class="k">do</span>
    <span class="nb">exec</span> <span class="s1">'irb -r ./application'</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">namespace</span> <span class="ss">:db</span> <span class="k">do</span>
  <span class="n">desc</span> <span class="s1">'Run migrations'</span>
  <span class="n">task</span> <span class="ss">:migrate</span><span class="p">,</span> <span class="p">[</span><span class="ss">:version</span><span class="p">]</span> <span class="k">do</span> <span class="o">|</span><span class="n">_t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
    <span class="nb">require</span> <span class="s1">'sequel/core'</span>
    <span class="no">Sequel</span><span class="p">.</span><span class="nf">extension</span> <span class="ss">:migration</span>

    <span class="n">version</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="ss">:version</span><span class="p">].</span><span class="nf">to_i</span> <span class="k">if</span> <span class="n">args</span><span class="p">[</span><span class="ss">:version</span><span class="p">]</span>

    <span class="no">Sequel</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="s1">'postgres://localhost:5432'</span><span class="p">,</span>
                   <span class="ss">user: </span><span class="s1">'postgres'</span><span class="p">,</span>
                   <span class="ss">password: </span><span class="s1">'123'</span><span class="p">,</span>
                   <span class="ss">logger: </span><span class="no">Logger</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="vg">$stderr</span><span class="p">))</span> <span class="k">do</span> <span class="o">|</span><span class="n">db</span><span class="o">|</span>
      <span class="no">Sequel</span><span class="o">::</span><span class="no">Migrator</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="s1">'db/migrations'</span><span class="p">,</span> <span class="ss">target: </span><span class="n">version</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>With that Rake can be used for to start the web server, start the console and run migrations.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   master <span class="o">!</span>4 ❯ bundle <span class="nb">exec </span>rake <span class="nt">-T</span>                                                                                                                           took  5s  3.1.0 at  16:10:57
rake app:console          <span class="c"># Open a console</span>
rake app:start            <span class="c"># Start server</span>
rake db:migrate[version]  <span class="c"># Run migrations</span>
</code></pre></div></div>

<p>Now that the app is already ready its time to start using the structure it already has.</p>

<p>://wiki.haskell.org/Function_compositions
https://ruby-doc.org/core-2.6/Proc.html#method-i-3C-3C</p>
:ET