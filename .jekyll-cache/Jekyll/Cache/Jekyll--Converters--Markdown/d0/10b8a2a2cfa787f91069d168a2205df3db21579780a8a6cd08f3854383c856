I"∆5<p>Hello, Today I‚Äôm gonna talk about Hanami, I really wish to use it, then I decided to create a project to combine everything that I want to learn. I intend to do a saga covering my journey to complete it. I intend to use some technologies like MQTT and RXTX to do the communication with my Arduino and after that an application to execute some commands on my board. This saga is inspired by <a href="https://www.sergioaugrod.com.br/iot-arduino-serial-e-mqtt/">this post</a> (made by a friend of mine), but I decided to use different tools, languages or frameworks to get some new knowledge.</p>

<p>The first post is about the high level application, responsible to send and receive all commands like a kind of dashboard where I can send commands, indicators and other things.</p>

<h3 id="introduction">Introduction</h3>

<p>Basically, I‚Äôm going to show how I made my setup basic development to a new Hanami application, but first what‚Äôs Hanami? My first definition is Hanami, based on website, is a modular web framework that allows you to do applications decoupled based on <a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architeture</a> and <a href="https://martinfowler.com/bliki/MonolithFirst.html">Monolith First</a>.</p>

<p>Ok, now I have the framework, but I don‚Äôt need to install all dependencies at my machine then I asked myself. <em>‚ÄúHow can I simplify my setup?‚Äù</em> One possibility is Docker. I decided to use it because I like :) and it turns easier to do the setup and to run applications. With Docker we can encapsulate all environment inside a container.</p>

<p>Another good tip, gave by a colleague, is <a href="https://github.com/github/scripts-to-rule-them-all">Scripts to rule them all</a>, it‚Äôs convenient because following these rules we can use it like a convention to run projects in different languages and frameworks keeping on mind we need only to run a script inside a folder to test, run and build.</p>

<h3 id="starting">Starting</h3>

<h5 id="0-creating-an-hanami-application">0. Creating an Hanami application</h5>
<p>After the hanami installation (running ‚Äògem install hanami‚Äô), the first thing to do is create an application that we want to run, we can do it running the command below.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">hanami</span> <span class="n">new</span> <span class="o">&lt;</span><span class="n">project</span><span class="o">-</span><span class="nb">name</span><span class="o">&gt;</span>

<span class="c1"># In my case I used</span>
<span class="n">hanami</span> <span class="n">new</span> <span class="n">space_wing</span> <span class="o">--</span><span class="n">database</span><span class="o">=</span><span class="n">postgresql</span></code></pre></figure>

<p><em>Ps:. You can pass options to it, for example database, test framework and etc, you can check all options at the <a href="https://github.com/hanami/hanami/blob/master/lib/hanami/commands/new/app.rb">code</a>. or on <a href="http://hanamirb.org">site</a></em></p>

<h4 id="1-running-on-docker">1. Running on Docker</h4>

<p>To run Docker first we need to install it, we want to install docker and docker-compose, but I won‚Äôt cover installation here to simplify this post, but you can check how do it at the <a href="https://docs.docker.com/engine/installation/">docker website</a>.</p>

<p>After installation, we can check it.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">~/projects/space_wing<span class="o">(</span>dev ‚úî<span class="o">)</span> docker <span class="nt">--version</span>
Docker version 1.12.1, build 23cf638</code></pre></figure>

<p><em>Ps:. Currently it‚Äôs stable version but you can use superior versions.</em></p>

<p>We need the file called ‚ÄòDockerfile‚Äô to specify all steps to build our application container, so we can start creating it.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">~/projects/space_wing<span class="o">(</span>dev ‚úî<span class="o">)</span> <span class="nb">touch </span>Dockerfile</code></pre></figure>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c">#Dockerfile content</span>
FROM ruby:2.3.3

RUN <span class="nb">mkdir</span> /space_wing
WORKDIR /space_wing

ADD Gemfile <span class="nb">.</span>
ADD Gemfile.lock <span class="nb">.</span>

RUN bundle <span class="nb">install

</span>ADD <span class="nb">.</span> /space_wing</code></pre></figure>

<p>After that, we can use the command ‚Äòdocker build .‚Äô to create a container with my application inside it. We also need to build all dependencies like the database and link between all containers, to do it we need to create the file called ‚Äòdocker-compose.yml‚Äô. This file is responsible to build all dependencies and the network between all containers, then let‚Äôs create it.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">~/projects/space_wing<span class="o">(</span>dev ‚úî<span class="o">)</span> <span class="nb">touch </span>docker-compose.yml</code></pre></figure>

<figure class="highlight"><pre><code class="language-yml" data-lang="yml"><span class="c1">#docker-compose.yml content</span>
<span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">2'</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">postgres</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">POSTGRES_DB</span><span class="pi">:</span> <span class="s">spacewing_development</span>
      <span class="na">POSTGRES_USER</span><span class="pi">:</span> <span class="s">spacewing</span>
      <span class="na">POSTGRES_PASSWORD</span><span class="pi">:</span> <span class="s">inicial1234</span>
  <span class="na">web</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">.</span>
    <span class="na">env_file</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">.env</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">bundle exec hanami s --host '0.0.0.0'</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">.:/space_wing</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">2300:2300"</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">db</span></code></pre></figure>

<p>And the .env file to store our environment variables, in our case a database string connection.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">~/projects/space_wing<span class="o">(</span>dev ‚úî<span class="o">)</span> <span class="nb">touch</span> .env

<span class="c">#.env content</span>
<span class="nv">DATABASE_URL</span><span class="o">=</span>postgres://spacewing:inicial1234@db/spacewing_development</code></pre></figure>

<p>And when we run ‚Äòdocker-compose up‚Äô, we got it:</p>

<p><img src="http://localhost:4000/assets/images/welcome_to_hanami.png" alt="welcome_to_hanami" /></p>

<p>It‚Äôs cool, right?</p>

<h4 id="2-adding-some-scripts">2. Adding some scripts</h4>

<p>In docker-compose we added this line:</p>

<figure class="highlight"><pre><code class="language-yml" data-lang="yml"><span class="na">command</span><span class="pi">:</span> <span class="s">bundle exec hanami s --host '0.0.0.0'</span></code></pre></figure>

<p>This command is responsible to run the app. If I‚Äôm at phoenix application for example we need to write a command like below.</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nb">command</span>: mix phoenix.server</code></pre></figure>

<p>However we need to remember <em>‚Äúhow can I run my server?‚Äù, ‚Äúhow can I execute tests?‚Äù, ‚Äúhow can I do all setup to my application?‚Äù.</em> If I have some migrations, I need to create the database and run migrations.
Afterwards, I can forgot to initialize git submodules If I have any. I need to remember what command I need to run to install my dependencies and so on.</p>

<p>Now, imagine when we have a codebase with many languages, we can spend much time only remembering how do the setup for the application before start some task. From my point of view it‚Äôs a caos.</p>

<p>One of possible solutions comes from <a href="https://github.com/github/scripts-to-rule-them-all">Script rule them all</a>. It has a mission to show some tips to automate some common tasks in your project, we can use it for any language or framework keeping on mind only the main idea behind that.</p>

<h6 id="21-script-to-run-tests">2.1 Script to run tests</h6>

<p>Let‚Äôs create a folder to store all scripts, and then we need to add two scripts, one is responsible to install the dependencies and the another one is responsible to run our tests.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">~/projects/space_wing<span class="o">(</span>dev ‚úî<span class="o">)</span> <span class="nb">mkdir </span>script
~/projects/space_wing<span class="o">(</span>dev ‚úî<span class="o">)</span> <span class="nb">touch</span> ./script/bootstrap
~/projects/space_wing<span class="o">(</span>dev ‚úî<span class="o">)</span> <span class="nb">touch</span> ./script/test

<span class="c"># bootstrap script content</span>
<span class="c">#!/bin/sh</span>

<span class="c"># script/bootstrap: Resolve all dependencies that the application requires to</span>
<span class="c">#                   run.</span>

<span class="nb">echo</span> <span class="s2">"==&gt; Building and solving dependencies‚Ä¶"</span>

<span class="k">if </span><span class="nb">command</span> <span class="nt">-v</span> docker-compose <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
    </span>docker-compose build
<span class="k">else
    </span><span class="nb">echo</span> <span class="s2">"==&gt; Please install docker first"</span>
<span class="k">fi</span>

<span class="c"># test script content</span>
<span class="c">#!/bin/sh</span>
<span class="c"># script/test: Run test suite for application. Optionally pass in a path to an</span>
<span class="c">#              individual test file to run a single test.</span>

<span class="nb">echo</span> <span class="s2">"==&gt; Running tests‚Ä¶"</span>

./script/bootstrap

<span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
  </span>docker-compose run web rake <span class="nb">test</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
<span class="k">else
  </span>docker-compose run web rake <span class="nb">test
</span><span class="k">fi</span></code></pre></figure>

<p>The script ‚Äòtest‚Äô is resposible to run tests, to execute it, we need to run ‚Äò./script/test‚Äô or ‚Äò./script/test <file-test-path>' to run a single test.</file-test-path></p>

<h6 id="22-script-to-run-server">2.2 Script to run server</h6>

<p>As the same example above, now, we can create a script to run the server. We can use the script below to execute it inside of container.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">~/projects/space_wing<span class="o">(</span>dev ‚úî<span class="o">)</span> <span class="nb">touch</span> ./script/server

<span class="c"># server script content</span>
<span class="c">#!/bin/sh</span>
<span class="c"># script/server: Launch the application and any extra required processes</span>
<span class="c">#                locally.</span>
<span class="nb">set</span> <span class="nt">-e</span>
<span class="nb">cd</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">dirname</span> <span class="s2">"</span><span class="nv">$0</span><span class="s2">"</span><span class="si">)</span><span class="s2">/.."</span>

<span class="nb">echo</span> <span class="s2">"&gt;&gt;&gt; Starting application..."</span>

<span class="k">if </span><span class="nb">command</span> <span class="nt">-v</span> docker-compose <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
  </span>docker-compose up
<span class="k">else
  </span><span class="nb">echo</span> <span class="s2">"==&gt; Please install docker first"</span>
<span class="k">fi</span></code></pre></figure>

<p>We can add many other scripts to different purposes trying to remember the rules, I don‚Äôt wanna to cover all scripts but you can check it at the project <a href="https://github.com/github/scripts-to-rule-them-all">page</a>.</p>

<p>That‚Äôs all folks! We can add ci like travis or wercker but I‚Äôm going to stop here. I really wish you like it, and if you like it, please share with your friends.</p>

<h3 id="references">References</h3>

<ul>
  <li>https://martinfowler.com/bliki/MonolithFirst.html</li>
  <li>https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html</li>
  <li>https://github.com/github/scripts-to-rule-them-all</li>
  <li>https://github.com/hanami/hanami/blob/master/lib/hanami/commands/new/app.rb</li>
  <li>http://hanamirb.org</li>
  <li>https://www.sergioaugrod.com.br/iot-arduino-serial-e-mqtt/</li>
  <li>https://docs.docker.com/engine/installation/</li>
</ul>

:ET